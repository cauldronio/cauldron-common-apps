# Generated by Django 3.1.3 on 2021-03-11 16:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('poolsched', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='IStackExchangeAutoRefresh',
            fields=[
                ('intention_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poolsched.intention')),
                ('last_autorefresh', models.DateTimeField(null=True)),
                ('scheduled', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'StackExchange Autorefresh',
                'db_table': 'poolsched_stackexchange_autorefresh',
            },
            bases=('poolsched.intention',),
        ),
        migrations.CreateModel(
            name='IStackExchangeAutoRefreshArchived',
            fields=[
                ('archivedintention_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poolsched.archivedintention')),
                ('last_autorefresh', models.DateTimeField(null=True)),
                ('scheduled', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'StackExchange Autorefresh Archived',
                'db_table': 'poolsched_stackexchange_autorefresh_archived',
            },
            bases=('poolsched.archivedintention',),
        ),
        migrations.CreateModel(
            name='StackExchangeToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=40)),
                ('api_key', models.CharField(max_length=40)),
                ('reset', models.DateTimeField(default=django.utils.timezone.now)),
                ('jobs', models.ManyToManyField(related_name='stackexchangetokens', related_query_name='stackexchangetoken', to='poolsched.Job')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stackexchangetokens', related_query_name='stackexchangetoken', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Tokens StackExchange',
                'db_table': 'poolsched_stackexchangetoken',
            },
        ),
        migrations.CreateModel(
            name='StackExchangeQuestionTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.CharField(max_length=100)),
                ('tagged', models.CharField(max_length=100)),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name_plural': 'StackExchange question tag',
                'db_table': 'poolsched_stackexchangeqtag',
                'unique_together': {('site', 'tagged')},
            },
        ),
        migrations.CreateModel(
            name='IStackExchangeRawArchived',
            fields=[
                ('archivedintention_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poolsched.archivedintention')),
                ('question_tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='poolsched_stackexchange.stackexchangequestiontag')),
            ],
            options={
                'verbose_name_plural': 'Archived StackExchangeRaw',
                'db_table': 'poolsched_stackexchangeiraw_archived',
            },
            bases=('poolsched.archivedintention',),
        ),
        migrations.CreateModel(
            name='IStackExchangeRaw',
            fields=[
                ('intention_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poolsched.intention')),
                ('question_tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='poolsched_stackexchange.stackexchangequestiontag')),
            ],
            options={
                'verbose_name_plural': 'Intentions StackExchangeRaw',
                'db_table': 'poolsched_stackexchangeiraw',
            },
            bases=('poolsched.intention',),
        ),
        migrations.CreateModel(
            name='IStackExchangeEnrichArchived',
            fields=[
                ('archivedintention_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poolsched.archivedintention')),
                ('question_tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='poolsched_stackexchange.stackexchangequestiontag')),
            ],
            options={
                'verbose_name_plural': 'Archived StackExchangeEnrich',
                'db_table': 'poolsched_stackexchangeienrich_archived',
            },
            bases=('poolsched.archivedintention',),
        ),
        migrations.CreateModel(
            name='IStackExchangeEnrich',
            fields=[
                ('intention_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poolsched.intention')),
                ('question_tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='poolsched_stackexchange.stackexchangequestiontag')),
            ],
            options={
                'verbose_name_plural': 'Intentions StackExchangeEnrich',
                'db_table': 'poolsched_stackexchangeienriched',
            },
            bases=('poolsched.intention',),
        ),
    ]
